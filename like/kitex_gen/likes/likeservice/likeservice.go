// Code generated by Kitex v0.7.0. DO NOT EDIT.

package likeservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	likes "pro2/like/kitex_gen/likes"
)

func serviceInfo() *kitex.ServiceInfo {
	return likeServiceServiceInfo
}

var likeServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "LikeService"
	handlerType := (*likes.LikeService)(nil)
	methods := map[string]kitex.MethodInfo{
		"LikeAction": kitex.NewMethodInfo(likeActionHandler, newLikeActionArgs, newLikeActionResult, false),
		"LikeList":   kitex.NewMethodInfo(likeListHandler, newLikeListArgs, newLikeListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "likes",
		"ServiceFilePath": "",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.7.0",
		Extra:           extra,
	}
	return svcInfo
}

func likeActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(likes.DouyinFavoriteActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(likes.LikeService).LikeAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *LikeActionArgs:
		success, err := handler.(likes.LikeService).LikeAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LikeActionResult)
		realResult.Success = success
	}
	return nil
}
func newLikeActionArgs() interface{} {
	return &LikeActionArgs{}
}

func newLikeActionResult() interface{} {
	return &LikeActionResult{}
}

type LikeActionArgs struct {
	Req *likes.DouyinFavoriteActionRequest
}

func (p *LikeActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(likes.DouyinFavoriteActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LikeActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LikeActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LikeActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *LikeActionArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(likes.DouyinFavoriteActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LikeActionArgs_Req_DEFAULT *likes.DouyinFavoriteActionRequest

func (p *LikeActionArgs) GetReq() *likes.DouyinFavoriteActionRequest {
	if !p.IsSetReq() {
		return LikeActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LikeActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeActionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LikeActionResult struct {
	Success *likes.DouyinFavoriteActionResponse
}

var LikeActionResult_Success_DEFAULT *likes.DouyinFavoriteActionResponse

func (p *LikeActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(likes.DouyinFavoriteActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LikeActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LikeActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LikeActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *LikeActionResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(likes.DouyinFavoriteActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LikeActionResult) GetSuccess() *likes.DouyinFavoriteActionResponse {
	if !p.IsSetSuccess() {
		return LikeActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LikeActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*likes.DouyinFavoriteActionResponse)
}

func (p *LikeActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeActionResult) GetResult() interface{} {
	return p.Success
}

func likeListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(likes.DouyinFavoriteListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(likes.LikeService).LikeList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *LikeListArgs:
		success, err := handler.(likes.LikeService).LikeList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LikeListResult)
		realResult.Success = success
	}
	return nil
}
func newLikeListArgs() interface{} {
	return &LikeListArgs{}
}

func newLikeListResult() interface{} {
	return &LikeListResult{}
}

type LikeListArgs struct {
	Req *likes.DouyinFavoriteListRequest
}

func (p *LikeListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(likes.DouyinFavoriteListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LikeListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LikeListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LikeListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *LikeListArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(likes.DouyinFavoriteListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LikeListArgs_Req_DEFAULT *likes.DouyinFavoriteListRequest

func (p *LikeListArgs) GetReq() *likes.DouyinFavoriteListRequest {
	if !p.IsSetReq() {
		return LikeListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LikeListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LikeListResult struct {
	Success *likes.DouyinFavoriteListResponse
}

var LikeListResult_Success_DEFAULT *likes.DouyinFavoriteListResponse

func (p *LikeListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(likes.DouyinFavoriteListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LikeListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LikeListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LikeListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *LikeListResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(likes.DouyinFavoriteListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LikeListResult) GetSuccess() *likes.DouyinFavoriteListResponse {
	if !p.IsSetSuccess() {
		return LikeListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LikeListResult) SetSuccess(x interface{}) {
	p.Success = x.(*likes.DouyinFavoriteListResponse)
}

func (p *LikeListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeListResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) LikeAction(ctx context.Context, Req *likes.DouyinFavoriteActionRequest) (r *likes.DouyinFavoriteActionResponse, err error) {
	var _args LikeActionArgs
	_args.Req = Req
	var _result LikeActionResult
	if err = p.c.Call(ctx, "LikeAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LikeList(ctx context.Context, Req *likes.DouyinFavoriteListRequest) (r *likes.DouyinFavoriteListResponse, err error) {
	var _args LikeListArgs
	_args.Req = Req
	var _result LikeListResult
	if err = p.c.Call(ctx, "LikeList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
